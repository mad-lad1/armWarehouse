#! /usr/bin/env python
from nav_msgs.msg import Odometry
from std_msgs.msg import Header
from gazebo_msgs.srv import GetModelState, GetModelStateRequest
from geometry_msgs.msg import TransformStamped
import tf2_ros
import rospy

if __name__ == "__main__":
	rospy.init_node('odom_publisher')
	
	# namespace of this node is used to name the placebot model instance in gazebo
	ns = rospy.get_namespace().strip('/')
	
	# odometry publisher object
	odom_pub=rospy.Publisher ('odom', Odometry, queue_size=10)

	# odometry transform broadcaster object
	odom_broadcaster = tf2_ros.TransformBroadcaster()

	rospy.wait_for_service ('/gazebo/get_model_state')
	get_model_srv = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)

	odom = Odometry()
	odom_tf = TransformStamped()

	model = GetModelStateRequest()
	model.model_name = ns
	#model.relative_entity_name = 'world'
	
	r = rospy.Rate(12)

	while not rospy.is_shutdown():
		result = get_model_srv(model)
		
		current_time = rospy.Time.now()
	
		odom.header.stamp = current_time
		odom.header.frame_id = "odom"
		odom.child_frame_id = "base_footprint"
		odom.pose.pose = result.pose
		odom.twist.twist = result.twist
		odom_pub.publish(odom)

		# first, we'll broadcast odom transform over tf
		odom_tf.header.stamp = current_time
		odom_tf.header.frame_id = ns + "/odom"
		odom_tf.child_frame_id = ns + "/base_footprint"
		odom_tf.transform.translation = result.pose.position
		odom_tf.transform.rotation = result.pose.orientation
		# broadcast the transform
		print "publishing tf"
		odom_broadcaster.sendTransform(odom_tf)

		r.sleep()
